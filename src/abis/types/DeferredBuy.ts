/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IDeferredBuy {
  export type ItemStruct = {
    itemType: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<string>;
    identifier: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type ItemStructOutput = [number, string, BigNumber, BigNumber] & {
    itemType: number;
    token: string;
    identifier: BigNumber;
    amount: BigNumber;
  };

  export type OfferStruct = {
    item: IDeferredBuy.ItemStruct;
    offerer: PromiseOrValue<string>;
    availableAt: PromiseOrValue<BigNumberish>;
    pricePerUnit: PromiseOrValue<BigNumberish>;
    claimed: PromiseOrValue<BigNumberish>;
  };

  export type OfferStructOutput = [
    IDeferredBuy.ItemStructOutput,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    item: IDeferredBuy.ItemStructOutput;
    offerer: string;
    availableAt: BigNumber;
    pricePerUnit: BigNumber;
    claimed: BigNumber;
  };
}

export interface DeferredBuyInterface extends utils.Interface {
  functions: {
    "CLAIM_TIMEOUT()": FunctionFragment;
    "_lastOffer()": FunctionFragment;
    "_offers(uint32)": FunctionFragment;
    "claimOffer(uint32,uint256[],uint256[])": FunctionFragment;
    "getLastOffer()": FunctionFragment;
    "getOffer(uint32)": FunctionFragment;
    "makeAnOffer((uint8,address,uint256,uint256),uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CLAIM_TIMEOUT"
      | "_lastOffer"
      | "_offers"
      | "claimOffer"
      | "getLastOffer"
      | "getOffer"
      | "makeAnOffer"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CLAIM_TIMEOUT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_lastOffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_offers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOffer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastOffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "makeAnOffer",
    values: [
      IDeferredBuy.ItemStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "CLAIM_TIMEOUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_lastOffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_offers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeAnOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Claim(uint32,address,address,uint256[],uint256[],uint256)": EventFragment;
    "Deposit(uint32,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Withdraw(uint32,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface ClaimEventObject {
  offerId: number;
  claimer: string;
  token: string;
  ids: BigNumber[];
  amounts: BigNumber[];
  claimerFunds: BigNumber;
}
export type ClaimEvent = TypedEvent<
  [number, string, string, BigNumber[], BigNumber[], BigNumber],
  ClaimEventObject
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface DepositEventObject {
  offerId: number;
  offerer: string;
  token: string;
  tokenId: BigNumber;
  amount: BigNumber;
  availableAt: BigNumber;
  pricePerUnit: BigNumber;
}
export type DepositEvent = TypedEvent<
  [number, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface WithdrawEventObject {
  offerId: number;
  withdrawFunds: BigNumber;
  timestamp: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [number, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface DeferredBuy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DeferredBuyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CLAIM_TIMEOUT(overrides?: CallOverrides): Promise<[BigNumber]>;

    _lastOffer(overrides?: CallOverrides): Promise<[number]>;

    _offers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        IDeferredBuy.ItemStructOutput,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        item: IDeferredBuy.ItemStructOutput;
        offerer: string;
        availableAt: BigNumber;
        pricePerUnit: BigNumber;
        claimed: BigNumber;
      }
    >;

    claimOffer(
      offerId: PromiseOrValue<BigNumberish>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getLastOffer(overrides?: CallOverrides): Promise<[number]>;

    getOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IDeferredBuy.OfferStructOutput]>;

    makeAnOffer(
      item: IDeferredBuy.ItemStruct,
      pricePerUnit: PromiseOrValue<BigNumberish>,
      availableAt: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CLAIM_TIMEOUT(overrides?: CallOverrides): Promise<BigNumber>;

  _lastOffer(overrides?: CallOverrides): Promise<number>;

  _offers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [IDeferredBuy.ItemStructOutput, string, BigNumber, BigNumber, BigNumber] & {
      item: IDeferredBuy.ItemStructOutput;
      offerer: string;
      availableAt: BigNumber;
      pricePerUnit: BigNumber;
      claimed: BigNumber;
    }
  >;

  claimOffer(
    offerId: PromiseOrValue<BigNumberish>,
    ids: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getLastOffer(overrides?: CallOverrides): Promise<number>;

  getOffer(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IDeferredBuy.OfferStructOutput>;

  makeAnOffer(
    item: IDeferredBuy.ItemStruct,
    pricePerUnit: PromiseOrValue<BigNumberish>,
    availableAt: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CLAIM_TIMEOUT(overrides?: CallOverrides): Promise<BigNumber>;

    _lastOffer(overrides?: CallOverrides): Promise<number>;

    _offers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        IDeferredBuy.ItemStructOutput,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        item: IDeferredBuy.ItemStructOutput;
        offerer: string;
        availableAt: BigNumber;
        pricePerUnit: BigNumber;
        claimed: BigNumber;
      }
    >;

    claimOffer(
      offerId: PromiseOrValue<BigNumberish>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getLastOffer(overrides?: CallOverrides): Promise<number>;

    getOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IDeferredBuy.OfferStructOutput>;

    makeAnOffer(
      item: IDeferredBuy.ItemStruct,
      pricePerUnit: PromiseOrValue<BigNumberish>,
      availableAt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Claim(uint32,address,address,uint256[],uint256[],uint256)"(
      offerId?: PromiseOrValue<BigNumberish> | null,
      claimer?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      ids?: null,
      amounts?: null,
      claimerFunds?: null
    ): ClaimEventFilter;
    Claim(
      offerId?: PromiseOrValue<BigNumberish> | null,
      claimer?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      ids?: null,
      amounts?: null,
      claimerFunds?: null
    ): ClaimEventFilter;

    "Deposit(uint32,address,address,uint256,uint256,uint256,uint256)"(
      offerId?: null,
      offerer?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      tokenId?: null,
      amount?: null,
      availableAt?: null,
      pricePerUnit?: null
    ): DepositEventFilter;
    Deposit(
      offerId?: null,
      offerer?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      tokenId?: null,
      amount?: null,
      availableAt?: null,
      pricePerUnit?: null
    ): DepositEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Withdraw(uint32,uint256,uint256)"(
      offerId?: null,
      withdrawFunds?: null,
      timestamp?: null
    ): WithdrawEventFilter;
    Withdraw(
      offerId?: null,
      withdrawFunds?: null,
      timestamp?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    CLAIM_TIMEOUT(overrides?: CallOverrides): Promise<BigNumber>;

    _lastOffer(overrides?: CallOverrides): Promise<BigNumber>;

    _offers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimOffer(
      offerId: PromiseOrValue<BigNumberish>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getLastOffer(overrides?: CallOverrides): Promise<BigNumber>;

    getOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeAnOffer(
      item: IDeferredBuy.ItemStruct,
      pricePerUnit: PromiseOrValue<BigNumberish>,
      availableAt: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CLAIM_TIMEOUT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _lastOffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _offers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimOffer(
      offerId: PromiseOrValue<BigNumberish>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getLastOffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeAnOffer(
      item: IDeferredBuy.ItemStruct,
      pricePerUnit: PromiseOrValue<BigNumberish>,
      availableAt: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
